// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot.subsystems;

import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;

import edu.wpi.first.networktables.NetworkTable;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Robot;
import frc.robot.RobotContainer;

public class DriveTrainSub extends SubsystemBase {
  /** Creates a new DriveTrainSub. */
  
  public double limelightX;
  public double limelightY;
  public double limelightArea;
  public NetworkTable table;
  public NetworkTableEntry tx;
  public NetworkTableEntry ty;
  public NetworkTableEntry ta;

  private WPI_VictorSPX leftMotorMaster;
  private WPI_VictorSPX leftMotorSlave;
  private SpeedControllerGroup leftMotorGroup;
  private WPI_VictorSPX rightMotorMaster;
  private WPI_VictorSPX rightMotorSlave;
  private SpeedControllerGroup rightMotorGroup;
  private DifferentialDrive driveTrainDifferential;
  
  public DriveTrainSub() {

    table = NetworkTableInstance.getDefault().getTable("limelight");
    tx = table.getEntry("tx");
    ty = table.getEntry("ty");
    ta = table.getEntry("ta");

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    leftMotorMaster = new WPI_VictorSPX(1);
       
    
    leftMotorSlave = new WPI_VictorSPX(3);
    
    
    leftMotorGroup = new SpeedControllerGroup(leftMotorMaster, leftMotorSlave  );
    addChild("leftMotorGroup",leftMotorGroup);
    
    rightMotorMaster = new WPI_VictorSPX(0);
    
    
    rightMotorSlave = new WPI_VictorSPX(2);
    
    
    rightMotorGroup = new SpeedControllerGroup(rightMotorMaster, rightMotorSlave  );
    addChild("rightMotorGroup",rightMotorGroup);
    
    
    driveTrainDifferential = new DifferentialDrive(leftMotorGroup, rightMotorGroup);
    addChild("driveTrainDifferential",driveTrainDifferential);
    driveTrainDifferential.setSafetyEnabled(true);
    driveTrainDifferential.setExpiration(0.1);
    driveTrainDifferential.setMaxOutput(1.0);

    

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    //shiftingSolenoid = new Solenoid(0);

    leftMotorSlave.follow(leftMotorMaster);
    rightMotorSlave.follow(rightMotorMaster);
  }

  @Override
  public void periodic() {
    // This method will be called once per scheduler run
  }

  public void driveWithDifferential() {
    driveTrainDifferential.arcadeDrive(RobotContainer.driverJoystick.getRawAxis(1) * -1,
                                       RobotContainer.driverJoystick.getRawAxis(4) * .7);
  }
}
